// Generated by CoffeeScript 1.12.2
(function() {
  var Notifications,
    slice = [].slice,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Notifications = (function() {
    function Notifications(elem1) {
      this.elem = elem1;
      this;
    }

    Notifications.prototype.test = function() {
      setTimeout(((function(_this) {
        return function() {
          _this.add("connection", "error", "Connection lost to <b>UiServer</b> on <b>localhost</b>!");
          return _this.add("message-Anyone", "info", "New  from <b>Anyone</b>.");
        };
      })(this)), 1000);
      return setTimeout(((function(_this) {
        return function() {
          return _this.add("connection", "done", "<b>UiServer</b> connection recovered.", 5000);
        };
      })(this)), 3000);
    };

    Notifications.prototype.add = function(id, type, body, timeout) {
      var elem, j, len, ref, width;
      if (timeout == null) {
        timeout = 0;
      }
      id = id.replace(/[^A-Za-z0-9]/g, "");
      ref = $(".notification-" + id);
      for (j = 0, len = ref.length; j < len; j++) {
        elem = ref[j];
        this.close($(elem));
      }
      elem = $(".notification.notificationTemplate", this.elem).clone().removeClass("notificationTemplate");
      elem.addClass("notification-" + type).addClass("notification-" + id);
      if (type === "progress") {
        elem.addClass("notification-done");
      }
      if (type === "error") {
        $(".notification-icon", elem).html("!");
      } else if (type === "done") {
        $(".notification-icon", elem).html("<div class='icon-success'></div>");
      } else if (type === "progress") {
        $(".notification-icon", elem).html("<div class='icon-success'></div>");
      } else if (type === "ask") {
        $(".notification-icon", elem).html("?");
      } else {
        $(".notification-icon", elem).html("i");
      }
      if (typeof body === "string") {
        $(".body", elem).html("<span class='message'>" + body + "</span>");
      } else {
        $(".body", elem).html("").append(body);
      }
      elem.appendTo(this.elem);
      if (timeout) {
        $(".close", elem).remove();
        setTimeout(((function(_this) {
          return function() {
            return _this.close(elem);
          };
        })(this)), timeout);
      }
      width = elem.outerWidth();
      if (!timeout) {
        width += 20;
      }
      if (elem.outerHeight() > 55) {
        elem.addClass("long");
      }
      elem.css({
        "width": "50px",
        "transform": "scale(0.01)"
      });
      elem.animate({
        "scale": 1
      }, 800, "easeOutElastic");
      elem.animate({
        "width": width
      }, 700, "easeInOutCubic");
      $(".body", elem).cssLater("box-shadow", "0px 0px 5px rgba(0,0,0,0.1)", 1000);
      $(".close, .button", elem).on("click", (function(_this) {
        return function() {
          _this.close(elem);
          return false;
        };
      })(this));
      $(".select", elem).on("click", (function(_this) {
        return function() {
          return _this.close(elem);
        };
      })(this));
      return elem;
    };

    Notifications.prototype.close = function(elem) {
      elem.stop().animate({
        "width": 0,
        "opacity": 0
      }, 700, "easeInOutCubic");
      return elem.slideUp(300, (function() {
        return elem.remove();
      }));
    };

    Notifications.prototype.log = function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return console.log.apply(console, ["[Notifications]"].concat(slice.call(args)));
    };

    Notifications.prototype.displayOpenerDialog = function() {
      var elem;
      elem = $("<div class='opener-overlay'><div class='dialog'>You have opened this page by clicking on a link. Please, confirm if you want to load this site.<a href='?' target='_blank' class='button'>Open site</a></div></div>");
      elem.find('a').on("click", function() {
        window.open("?", "_blank");
        window.close();
        return false;
      });
      return $("body").prepend(elem);
    };

    Notifications.prototype.actionOpenWindow = function(params) {
      var w;
      if (typeof params === "string") {
        w = window.open();
        w.opener = null;
        return w.location = params;
      } else {
        w = window.open(null, params[1], params[2]);
        w.opener = null;
        return w.location = params[0];
      }
    };

    Notifications.prototype.actionRequestFullscreen = function() {
      var elem, request_fullscreen;
      if (indexOf.call(this.site_info.settings.permissions, "Fullscreen") >= 0) {
        elem = document.getElementById("inner-iframe");
        request_fullscreen = elem.requestFullScreen || elem.webkitRequestFullscreen || elem.mozRequestFullScreen || elem.msRequestFullScreen;
        request_fullscreen.call(elem);
        return setTimeout(((function(_this) {
          return function() {
            if (window.innerHeight !== screen.height) {
              return _this.displayConfirm("This site requests permission:" + " <b>Fullscreen</b>", "Grant", function() {
                return request_fullscreen.call(elem);
              });
            }
          };
        })(this)), 100);
      } else {
        return this.displayConfirm("This site requests permission:" + " <b>Fullscreen</b>", "Grant", (function(_this) {
          return function() {
            _this.site_info.settings.permissions.push("Fullscreen");
            _this.actionRequestFullscreen();
            return _this.ws.cmd("permissionAdd", "Fullscreen");
          };
        })(this));
      }
    };

    Notifications.prototype.actionPermissionAdd = function(message) {
      var permission;
      permission = message.params;
      return this.displayConfirm("This site requests permission:" + (" <b>" + (this.toHtmlSafe(permission)) + "</b>"), "Grant", (function(_this) {
        return function() {
          return _this.ws.cmd("permissionAdd", permission, function() {
            return _this.sendInner({
              "cmd": "response",
              "to": message.id,
              "result": "Granted"
            });
          });
        };
      })(this));
    };

    Notifications.prototype.actionNotification = function(message) {
      var body;
      message.params = this.toHtmlSafe(message.params);
      body = $("<span class='message'>" + message.params[1] + "</span>");
      return this.add("notification-" + message.id, message.params[0], body, message.params[2]);
    };

    Notifications.prototype.displayConfirm = function(message, caption, cancel, cb) {
      var body, button, cButton;
      if (cancel == null) {
        cancel = false;
      }
      body = $("<span class='message'>" + message + "</span>");
      button = $("<a href='#" + caption + "' class='button button-" + caption + "'>" + caption + "</a>");
      button.on("click", (function(_this) {
        return function() {
          cb(true);
          return false;
        };
      })(this));
      body.append(button);
      if (cancel) {
        cButton = $("<a href='#" + cancel + "' class='button button-" + cancel + "'>" + cancel + "</a>");
        cButton.on("click", (function(_this) {
          return function() {
            cb(false);
            return false;
          };
        })(this));
        body.append(cButton);
      }
      this.add("notification-" + caption, "ask", body);
      button.focus();
      return $(".notification").scrollLeft(0);
    };

    Notifications.prototype.actionConfirm = function(message, cb) {
      var caption;
      if (cb == null) {
        cb = false;
      }
      message.params = this.toHtmlSafe(message.params);
      if (message.params[1]) {
        caption = message.params[1];
      } else {
        caption = "ok";
      }
      return this.displayConfirm(message.params[0], caption, (function(_this) {
        return function() {
          _this.sendInner({
            "cmd": "response",
            "to": message.id,
            "result": "boom"
          });
          return false;
        };
      })(this));
    };

    Notifications.prototype.displayPrompt = function(message, type, caption, cb) {
      var body, button, input;
      body = $("<span class='message'>" + message + "</span>");
      input = $("<input type='" + type + "' class='input button-" + type + "'/>");
      input.on("keyup", (function(_this) {
        return function(e) {
          if (e.keyCode === 13) {
            return button.trigger("click");
          }
        };
      })(this));
      body.append(input);
      button = $("<a href='#" + caption + "' class='button button-" + caption + "'>" + caption + "</a>");
      button.on("click", (function(_this) {
        return function() {
          cb(input.val());
          return false;
        };
      })(this));
      body.append(button);
      this.add("notification-" + message.id, "ask", body);
      input.focus();
      return $(".notification").scrollLeft(0);
    };

    Notifications.prototype.actionPrompt = function(message) {
      var caption, type;
      message.params = this.toHtmlSafe(message.params);
      if (message.params[1]) {
        type = message.params[1];
      } else {
        type = "text";
      }
      caption = "OK";
      return this.displayPrompt(message.params[0], type, caption, (function(_this) {
        return function(res) {
          return _this.sendInner({
            "cmd": "response",
            "to": message.id,
            "result": res
          });
        };
      })(this));
    };

    Notifications.prototype.actionProgress = function(message) {
      var body, circle, elem, offset, percent, width;
      percent = Math.min(100, message.percent) / 100;
      offset = 75 - (percent * 75);
      circle = "<div class=\"circle\"><svg class=\"circle-svg\" width=\"30\" height=\"30\" viewport=\"0 0 30 30\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\">\n  				<circle r=\"12\" cx=\"15\" cy=\"15\" fill=\"transparent\" class=\"circle-bg\"></circle>\n  				<circle r=\"12\" cx=\"15\" cy=\"15\" fill=\"transparent\" class=\"circle-fg\" style=\"stroke-dashoffset: " + offset + "\"></circle>\n</svg></div>";
      body = "<span class='message'>" + message.content + "</span>" + circle;
      elem = $(".notification-" + message.id);
      if (elem.length) {
        width = $(".body .message", elem).outerWidth();
        $(".body .message", elem).html(message.content);
        if ($(".body .message", elem).css("width") === "") {
          $(".body .message", elem).css("width", width);
        }
        $(".body .circle-fg", elem).css("stroke-dashoffset", offset);
      } else {
        elem = this.add(message.id, "progress", $(body));
      }
      if (percent > 0) {
        $(".body .circle-bg", elem).css({
          "animation-play-state": "paused",
          "stroke-dasharray": "180px"
        });
      }
      if ($(".notification-icon", elem).data("done")) {
        return false;
      } else if (message.percent >= 100) {
        $(".circle-fg", elem).css("transition", "all 0.3s ease-in-out");
        setTimeout((function() {
          $(".notification-icon", elem).css({
            transform: "scale(1)",
            opacity: 1
          });
          return $(".notification-icon .icon-success", elem).css({
            transform: "rotate(45deg) scale(1)"
          });
        }), 300);
        if (message.autoClose) {
          setTimeout(((function(_this) {
            return function() {
              return _this.close(elem);
            };
          })(this)), 3000);
        }
        return $(".notification-icon", elem).data("done", true);
      } else if (message.percent < 0) {
        $(".body .circle-fg", elem).css("stroke", "#ec6f47").css("transition", "transition: all 0.3s ease-in-out");
        setTimeout(((function(_this) {
          return function() {
            $(".notification-icon", elem).css({
              transform: "scale(1)",
              opacity: 1
            });
            elem.removeClass("notification-done").addClass("notification-error");
            return $(".notification-icon .icon-success", elem).removeClass("icon-success").html("!");
          };
        })(this)), 300);
        return $(".notification-icon", elem).data("done", true);
      }
    };

    Notifications.prototype.toHtmlSafe = function(values) {
      var i, j, len, value;
      if (!(values instanceof Array)) {
        values = [values];
      }
      for (i = j = 0, len = values.length; j < len; i = ++j) {
        value = values[i];
        value = String(value).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;');
        value = value.replace(/&lt;([\/]{0,1}(br|b|u|i))&gt;/g, "<$1>");
        values[i] = value;
      }
      return values;
    };

    return Notifications;

  })();

  window.Notifications = Notifications;

}).call(this);
// Generated by CoffeeScript 1.12.2
(function() {
  jQuery.fn.readdClass = function(class_name) {
    var elem;
    elem = this;
    elem.removeClass(class_name);
    setTimeout((function() {
      return elem.addClass(class_name);
    }), 1);
    return this;
  };

  jQuery.fn.removeLater = function(time) {
    var elem;
    if (time == null) {
      time = 500;
    }
    elem = this;
    setTimeout((function() {
      return elem.remove();
    }), time);
    return this;
  };

  jQuery.fn.hideLater = function(time) {
    var elem;
    if (time == null) {
      time = 500;
    }
    elem = this;
    setTimeout((function() {
      if (elem.css("opacity") === 0) {
        return elem.css("display", "none");
      }
    }), time);
    return this;
  };

  jQuery.fn.addClassLater = function(class_name, time) {
    var elem;
    if (time == null) {
      time = 5;
    }
    elem = this;
    setTimeout((function() {
      return elem.addClass(class_name);
    }), time);
    return this;
  };

  jQuery.fn.cssLater = function(name, val, time) {
    var elem;
    if (time == null) {
      time = 500;
    }
    elem = this;
    setTimeout((function() {
      return elem.css(name, val);
    }), time);
    return this;
  };

}).call(this);
jQuery.cssHooks['scale'] = {
	get: function(elem, computed) {
		var match = window.getComputedStyle(elem)[transform_property].match("[0-9\.]+")
		if (match) {
			var scale = parseFloat(match[0])
			return scale
		} else {
			return 1.0
		}
	},
	set: function(elem, val) {
		//var transforms = $(elem).css("transform").match(/[0-9\.]+/g)
		var transforms = window.getComputedStyle(elem)[transform_property].match(/[0-9\.]+/g)
		if (transforms) {
			transforms[0] = val
			transforms[3] = val
			//$(elem).css("transform", 'matrix('+transforms.join(", ")+")")
			elem.style[transform_property] = 'matrix('+transforms.join(", ")+')'
		} else {
			elem.style[transform_property] = "scale("+val+")"
		}
	}
}

jQuery.fx.step.scale = function(fx) {
	jQuery.cssHooks['scale'].set(fx.elem, fx.now)
};


if (window.getComputedStyle(document.body).transform) {
	transform_property = "transform"
} else {
	transform_property = "webkitTransform"
}
